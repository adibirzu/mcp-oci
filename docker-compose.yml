version: "3.9"

services:
  # Main MCP-OCI service
  mcp-oci:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    image: mcp-oci:latest
    container_name: mcp-oci-main
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Override with environment-specific settings
      MCP_ENV: ${MCP_ENV:-production}
      MCP_TRANSPORT: ${MCP_TRANSPORT:-streamable}
      MCP_HOST: 0.0.0.0
      OCI_CLI_AUTH: ${OCI_CLI_AUTH:-instance_principal}
    ports:
      # Streamable HTTP ports
      - "${MCP_PORT_COMPUTE:-7001}:7001"
      - "${MCP_PORT_DATABASE:-7002}:7002"
      - "${MCP_PORT_NETWORK:-7003}:7003"
      - "${MCP_PORT_IAM:-7004}:7004"
      - "${MCP_PORT_OBSERVABILITY:-7005}:7005"
      - "${MCP_PORT_RESOURCE:-7006}:7006"
      - "${MCP_PORT_COST:-7007}:7007"
      - "${MCP_PORT_IDENTITY:-7008}:7008"
      - "${MCP_PORT_ONEAGENT:-7009}:7009"
      - "${MCP_PORT_LOGGING:-7010}:7010"
      - "${MCP_PORT_ENHANCED:-7011}:7011"
      # Main HTTP ports
      - "8000-8011:8000-8011"
      # WebSocket port
      - "${MCP_PORT_WEBSOCKET:-9000}:9000"
      # gRPC port
      - "${MCP_PORT_GRPC:-50051}:50051"
      # Metrics port
      - "${MCP_METRICS_PORT:-9090}:9090"
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
      - ~/.oci:/root/.oci:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    profiles:
      - cache

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning:ro
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-oci
    networks:
      - mcp-network
    profiles:
      - proxy

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
  prometheus-data:
  grafana-data: